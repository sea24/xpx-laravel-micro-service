<?php

return [

    /*
    |--------------------------------------------------------------------------
    | 启用节点列表缓存
    |--------------------------------------------------------------------------
    |
    | 启用缓存可以减少请求服务中心次数，在调试环境可以关闭缓存，以免产生不必要的疑惑
    |
    */

    'nodes_cache_enable' => env('MICRO_SERVICE_NODES_CACHE_ENABLE', false),

    /*
    |--------------------------------------------------------------------------
    | 节点列表缓存键
    |--------------------------------------------------------------------------
    |
    | 参与节点列表缓存键的构造，配置会在使用时拼接上服务名称作为真正的键
    |
    */

    'nodes_cache_key' => env('MICRO_SERVICE_CACHE_KEY', 'service_nodes'),

    /*
    |--------------------------------------------------------------------------
    | 节点列表缓存有效期（秒）
    |--------------------------------------------------------------------------
    |
    | 节点列表缓存会在该配置时间之后时效，届时将重新请求服务注册中心获取节点列表
    |
    */

    'nodes_cache_expire' => env('MICRO_SERVICE_NODES_CACHE_EXPIRE', 3600),

    /*
    |--------------------------------------------------------------------------
    | 获取节点列表重试次数
    |--------------------------------------------------------------------------
    |
    | 从服务器获取节点列表失败后的重试次数，到达限制后会抛出节点列表无可用节点异常
    |
    */

    'get_nodes_retry' => env('MICRO_SERVICE_GET_NODES_RETRY', 3),

    /*
    |--------------------------------------------------------------------------
    | 远程调用器超时时间（毫秒）
    |--------------------------------------------------------------------------
    |
    | 远程调用器发送请求之后，超过该时间服务器还没有返回，则会抛出异常
    |
    */

    'remote_timeout' => env('MICRO_SERVICE_REMOTE_TIMEOUT', 30000),

    /*
    |--------------------------------------------------------------------------
    | 服务中心驱动
    |--------------------------------------------------------------------------
    |
    | 默认项支持的值 remote 和 local ，调试时可以使用 local 在配置文件中配置固定的服务节点列表
    | 你可以根据业务需要替换自己的驱动实现
    |
    */
    'service_center_driver' => [
        // 默认使用
        'default' => env('MICRO_SERVICE_SERVICE_CENTER_DRIVER_DEFAULT', 'local'),
        // 本地驱动
        'local' => \Gzoran\LaravelMicroService\Clients\ServiceCenterDrivers\LocalServiceCenterDriver::class,
        // 远程驱动
        'remote' => \Gzoran\LaravelMicroService\Clients\ServiceCenterDrivers\RemoteServiceCenterDriver::class,
    ],

    /*
    |--------------------------------------------------------------------------
    | 服务中心节点列表
    |--------------------------------------------------------------------------
    |
    | 仅当服务中心驱动设置为 remote 时，以下配置的节点列表才会生效
    |
    */
    'service_center_nodes' => [
        // 生产环境
        'production' => [
            //
        ],
        // 测试环境
        'testing' => [
            //
        ],
        // 开发环境
        'local' => [
            [
                'scheme' => 'http', // 协议
                'host' => 'www.demo.com', // 主机地址
                'port' => 80, // 端口
                'path' => 'rpc/demo-server', // 路径
            ],
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | 服务端节点列表
    |--------------------------------------------------------------------------
    |
    | 仅当服务中心驱动设置为 local 时，以下配置的节点列表才会生效
    |
    */
    'server_nodes' => [
        // 生产环境
        'production' => [
            //
        ],
        // 测试环境
        'testing' => [
            //
        ],
        // 开发环境
        'local' => [
            [
                // 服务端名称
                'server_name' => 'demo_server',
                // 节点列表
                'nodes' => [
                    [
                        'scheme' => 'http', // 协议
                        'host' => 'www.demo.com', // 主机地址
                        'port' => 80, // 端口
                        'path' => 'rpc/demo-server', // 路径
                    ],
                ],
            ],
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | 服务端全局服务
    |--------------------------------------------------------------------------
    |
    | 全局服务将会在你的每一个服务端实例中注册
    | 数组的 key 为服务名前缀，用以区分不同服务类的相同方法，单词用下划线分割
    |
    */
    'server_services' => [
        // 'user' => UserService::class
    ],

    /*
    |--------------------------------------------------------------------------
    | 服务端全局中间件
    |--------------------------------------------------------------------------
    |
    | 服务端全局中间件将会在你的每一个服务端实例中注册
    | 数组的 key 为服务名前缀，用以区分不同服务类的相同方法，单词用下划线分割
    |
    */
    'server_middleware' => [
        \Gzoran\LaravelMicroService\Servers\Middleware\ExceptionSerializeMiddleware::class,
    ],

    /*
    |--------------------------------------------------------------------------
    | 服务端全局过滤器
    |--------------------------------------------------------------------------
    |
    | 服务端全局过滤器将会在你的每一个服务端实例中注册，过滤器可以调整 RPC 底层输入输出
    |
    */
    'server_filters' => [
        \Gzoran\LaravelMicroService\Servers\Filters\JsonRpcFilter::class,
        \Gzoran\LaravelMicroService\Servers\Filters\TracerFilter::class,
        \Gzoran\LaravelMicroService\Servers\Filters\EncryptFilter::class,
    ],

    /*
    |--------------------------------------------------------------------------
    | 服务端注册
    |--------------------------------------------------------------------------
    |
    | 你可以在这里配置向服务中心注册的服务端及其节点
    |
    */
    'server_registers' => [
        [
            // 服务端名称
            'server_name' => 'demo_server',
            // 节点列表
            'nodes' => [
                [
                    'scheme' => 'http', // 协议
                    'host' => 'www.demo.com', // 主机地址
                    'port' => 80, // 端口
                    'path' => 'rpc/demo-server', // 路径
                ],
            ],
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | 客户端全局中间件
    |--------------------------------------------------------------------------
    |
    | 客户端全局中间件将会在你的每一个客户端端实例中注册
    |
    */
    'client_middleware' => [
        // LogMiddleware::class
    ],

    /*
    |--------------------------------------------------------------------------
    | 客户端中间件组
    |--------------------------------------------------------------------------
    |
    | 客户端中间件组可以方便批量注册多个中间件
    |
    */
    'client_middleware_groups' => [
        // 'monitoring' => [LogMiddleware::class],
    ],

    /*
    |--------------------------------------------------------------------------
    | 客户端全局过滤器
    |--------------------------------------------------------------------------
    |
    | 客户端全局过滤器将会在你的每一个客户端实例中注册，过滤器可以调整 RPC 底层输入输出
    |
    */
    'client_filters' => [
        \Gzoran\LaravelMicroService\Clients\Filters\JsonRpcFilter::class,
        \Gzoran\LaravelMicroService\Clients\Filters\TracerFilter::class,
        \Gzoran\LaravelMicroService\Clients\Filters\EncryptFilter::class,
    ],

    /*
    |--------------------------------------------------------------------------
    | 服务追踪
    |--------------------------------------------------------------------------
    |
    | 服务追踪能记录服务调用过程、请求时间与响应时间等，以帮助开发者清晰了解系统调用栈
    |
    */
    'tracer' => [
        // 启用状态
        'enable' => env('MICRO_SERVICE_TRACER_ENABLE', false),
        // 排除追踪的服务（服务端名称：方法）
        'except' => [
            'service_center_server:trace*',
        ],
    ],
];